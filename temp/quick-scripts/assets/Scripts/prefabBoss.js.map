{"version":3,"sources":["prefabBoss.js"],"names":["cc","Class","extends","Component","properties","movingRight","settingWidth","settingHeight","movingBoss","widthCanvas","Canvas","instance","node","getContentSize","width","widthBoss","moving","tween","to","x","scaleX","then","repeatForever","start","height"],"mappings":";;;;;;AACAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,qBAAa,IADL;AAERC,sBAAa,CAFL;AAGRC,uBAAc;AAHN,KAHP;;AASL;;AAEA;;AAEAC,cAbK,wBAaO;AACR,YAAIC,cAAcT,GAAGU,MAAH,CAAUC,QAAV,CAAmBC,IAAnB,CAAwBC,cAAxB,GAAyCC,KAA3D;AACA,YAAIC,YAAY,KAAKH,IAAL,CAAUE,KAA1B;;AAEA,YAAG,KAAKT,WAAL,KAAqB,IAAxB,EAA6B;AACzB,gBAAIW,SAAShB,GAAGiB,KAAH,GACZC,EADY,CACT,CADS,EACN,EAACC,GAAGV,cAAY,CAAZ,GAAgBM,YAAU,CAA9B,EADM,EAEZG,EAFY,CAET,IAFS,EAEH,EAACE,QAAQ,CAAC,CAAV,EAFG,EAGZF,EAHY,CAGT,CAHS,EAGN,EAACC,GAAG,EAAEV,cAAY,CAAZ,GAAgBM,YAAU,CAA5B,CAAJ,EAHM,EAIZG,EAJY,CAIT,IAJS,EAIH,EAACE,QAAQ,CAAT,EAJG,EAKZF,EALY,CAKT,CALS,EAKN,EAACC,GAAG,CAAJ,EALM,CAAb;AAMAnB,eAAGiB,KAAH,CAAS,KAAKL,IAAd,EAAoBS,IAApB,CAAyBL,MAAzB,EAAiCM,aAAjC,GAAiDC,KAAjD;AACH,SARD,MAQK;AACD,iBAAKX,IAAL,CAAUQ,MAAV,GAAmB,CAAC,CAApB;AACA,gBAAIJ,UAAShB,GAAGiB,KAAH,GACZC,EADY,CACT,CADS,EACN,EAACC,GAAG,EAAEV,cAAY,CAAZ,GAAgBM,YAAU,CAA5B,CAAJ,EADM,EAEZG,EAFY,CAET,IAFS,EAEH,EAACE,QAAQ,CAAT,EAFG,EAGZF,EAHY,CAGT,CAHS,EAGN,EAACC,GAAIV,cAAY,CAAZ,GAAgBM,YAAU,CAA/B,EAHM,EAIZG,EAJY,CAIT,IAJS,EAIH,EAACE,QAAQ,CAAC,CAAV,EAJG,EAKZF,EALY,CAKT,CALS,EAKN,EAACC,GAAG,CAAJ,EALM,CAAb;AAMAnB,eAAGiB,KAAH,CAAS,KAAKL,IAAd,EAAoBS,IAApB,CAAyBL,OAAzB,EAAiCM,aAAjC,GAAiDC,KAAjD;AACH;AACJ,KAnCI;AAqCLA,SArCK,mBAqCI;AACL,aAAKX,IAAL,CAAUE,KAAV,GAAkB,KAAKR,YAAvB;AACA,aAAKM,IAAL,CAAUY,MAAV,GAAmB,KAAKjB,aAAxB;AACA,aAAKC,UAAL;AACH;AAzCI;;AA2CL;AA3CJ","file":"prefabBoss.js","sourceRoot":"../../../../assets/Scripts","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        movingRight: true,\n        settingWidth:0,\n        settingHeight:0,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    movingBoss(){\n        let widthCanvas = cc.Canvas.instance.node.getContentSize().width;\n        let widthBoss = this.node.width;\n\n        if(this.movingRight === true){\n            let moving = cc.tween()\n            .to(3, {x: widthCanvas/2 - widthBoss/2})\n            .to(0.01, {scaleX: -1})\n            .to(6, {x: -(widthCanvas/2 - widthBoss/2)})\n            .to(0.01, {scaleX: 1})\n            .to(3, {x: 0 })\n            cc.tween(this.node).then(moving).repeatForever().start();\n        }else{\n            this.node.scaleX = -1;\n            let moving = cc.tween()\n            .to(3, {x: -(widthCanvas/2 - widthBoss/2)})\n            .to(0.01, {scaleX: 1})\n            .to(6, {x: (widthCanvas/2 - widthBoss/2)})\n            .to(0.01, {scaleX: -1})\n            .to(3, {x: 0 })\n            cc.tween(this.node).then(moving).repeatForever().start();\n        }\n    },\n\n    start () {\n        this.node.width = this.settingWidth;\n        this.node.height = this.settingHeight;\n        this.movingBoss();\n    },\n\n    // update (dt) {},\n});\n"]}